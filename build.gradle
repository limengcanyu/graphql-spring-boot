/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 oEmbedler Inc. and Contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id "com.jfrog.bintray" version "$LIB_BINTRAY_PLUGIN_VER" apply false
    id 'net.researchgate.release' version "$LIB_RELEASE_PLUGIN_VER"
    id "org.springframework.boot" version "$LIB_SPRING_BOOT_VER" apply false
    id "com.jfrog.artifactory" version "4.15.1" apply false
    id "org.sonarqube" version "3.0"
    id "jacoco"
}

sonarqube {
    properties {
        property "sonar.projectKey", "graphql-java-kickstart_graphql-spring-boot"
        property "sonar.organization", "graphql-java-kickstart"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.bintray"
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'com.jfrog.artifactory'

    group "$PROJECT_GROUP"

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/graphql-java-kickstart/releases" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local" }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:$LIB_SPRING_BOOT_VER"
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"

        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    jacoco {
        toolVersion = "0.8.7-SNAPSHOT"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = false
            csv.enabled = false
        }
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    compileJava {
        sourceCompatibility = SOURCE_COMPATIBILITY
        targetCompatibility = TARGET_COMPATIBILITY
    }

    compileJava.dependsOn(processResources)

    if (!it.name.startsWith('example')) {

        //disable Gradle Metadata generation as it may cause unwanted side effects
        tasks.withType(GenerateModuleMetadata) {
            enabled = false
        }

        jar {
            from "LICENSE.md"
        }

        java {
            withSourcesJar()
            withJavadocJar()
        }

        publishing {
            publications {
                mainProjectPublication(MavenPublication) {
                    from components.java

                    // to avoid "Publication only contains dependencies and/or constraints without a version" error
                    // see https://docs.gradle.org/6.2.1/userguide/publishing_maven.html#publishing_maven:resolved_dependencies
                    versionMapping {
                        usage('java-api') {
                            fromResolutionOf('runtimeClasspath')
                        }
                        usage('java-runtime') {
                            fromResolutionResult()
                        }
                    }

                    pom {
                        resolveStrategy = DELEGATE_FIRST
                        name = PROJECT_NAME
                        description = PROJECT_DESC
                        url = PROJECT_GIT_REPO_URL
                        scm {
                            url = PROJECT_GIT_REPO_URL
                            connection = PROJECT_GIT_REPO_URL
                            developerConnection = PROJECT_GIT_REPO_URL
                        }
                        licenses {
                            license {
                                name = PROJECT_LICENSE
                                url = PROJECT_LICENSE_URL
                                distribution = 'repo'
                            }
                        }
                        developers {
                            developer {
                                id = PROJECT_DEV_ID
                                name = PROJECT_DEV_NAME
                            }
                        }
                    }
                }
            }
        }

        bintray {
            user = System.env.BINTRAY_USER ?: project.findProperty('BINTRAY_USER') ?: ''
            key = System.env.BINTRAY_PASS ?: project.findProperty('BINTRAY_PASS') ?: ''
            publications = ['mainProjectPublication']
            publish = true
            pkg {
                repo = 'releases'
                name = PROJECT_NAME
                desc = PROJECT_DESC
                licenses = [PROJECT_LICENSE]
                vcsUrl = PROJECT_GIT_REPO_URL
                userOrg = 'graphql-java-kickstart'
                version {
                    name = project.version
                    gpg {
                        sign = true
                    }
                    mavenCentralSync {
                        user = System.env.OSS_USER_TOKEN_KEY ?: project.findProperty('OSS_USER_TOKEN_KEY') ?: ''
                        password = System.env.OSS_USER_TOKEN_PASS ?: project.findProperty('OSS_USER_TOKEN_PASS') ?: ''
                    }
                }
            }
        }

        artifactory {
            contextUrl = 'https://oss.jfrog.org'
            publish {
                repository {
                    if (project.version.endsWith("-SNAPSHOT")) {
                        repoKey = 'oss-snapshot-local'
                    } else {
                        repoKey = 'oss-release-local'
                    }
                    username = System.env.BINTRAY_USER ?: project.findProperty('BINTRAY_USER') ?: ''
                    password = System.env.BINTRAY_PASS ?: project.findProperty('BINTRAY_PASS') ?: ''
                }
                defaults {
                    publications('mainProjectPublication')
                    publishArtifacts = true
                    publishPom = true
                }
            }
            resolve {
                repoKey = 'oss-snapshot-local'
            }
            clientConfig.info.setBuildNumber(System.getProperty('build.number'))
        }
    }
}

release {
    tagTemplate = 'v${version}'
    failOnPublishNeeded = false
    ignoredSnapshotDependencies = [
            'com.graphql-java-kickstart:altair-spring-boot-autoconfigure',
            'com.graphql-java-kickstart:altair-spring-boot-starter',
            'com.graphql-java-kickstart:graphiql-spring-boot-autoconfigure',
            'com.graphql-java-kickstart:graphiql-spring-boot-starter',
            'com.graphql-java-kickstart:graphql-spring-boot-autoconfigure',
            'com.graphql-java-kickstart:graphql-spring-boot-starter',
            'com.graphql-java-kickstart:graphql-spring-boot-starter-test',
            'com.graphql-java-kickstart:graphql-spring-boot-test',
            'com.graphql-java-kickstart:graphql-spring-boot-test-autoconfigure',
            'com.graphql-java-kickstart:voyager-spring-boot-autoconfigure',
            'com.graphql-java-kickstart:voyager-spring-boot-starter',
            'com.graphql-java-kickstart:playground-spring-boot-autoconfigure',
            'com.graphql-java-kickstart:playground-spring-boot-starter'
    ]
}

task build {
    dependsOn subprojects.findResults { it.tasks.findByName('assemble') }
    dependsOn subprojects.findResults { it.tasks.findByName('check') }
    dependsOn subprojects.findResults { it.tasks.findByName('bintray') }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
